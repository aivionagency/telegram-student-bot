# –±–æ—Ç 2.py
import pickle
import logging
import datetime
import os
import re
import telegram
import asyncio
import time

import io
import base64
import fitz  # PyMuPDF
from PIL import Image
from openai import OpenAI
from sheets_logger import log_g_sheets
from dotenv import load_dotenv
from aiohttp import web
from google.auth.transport.requests import Request
from io import BytesIO
from googleapiclient.http import MediaIoBaseUpload
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ConversationHandler, CallbackContext, CallbackQueryHandler
)

import auth_web
import config
from database import get_textbooks_by_subject

load_dotenv()


# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–ê ---

(
    # –ì–ª–∞–≤–Ω—ã–µ –º–µ–Ω—é
    MAIN_MENU, SCHEDULE_MENU, HOMEWORK_MENU, PERSONAL_HW_MENU,

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    GET_NAME, GET_EMAIL,

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    CONFIRM_DELETE_SCHEDULE,

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –î–ó
    GET_HW_TEXT, CHOOSE_HW_SUBJECT, CHOOSE_HW_DATE_OPTION,
    EDIT_HW_CHOOSE_SUBJECT, EDIT_HW_GET_DATE,  EDIT_HW_MENU, EDIT_HW_REPLACE_TEXT,

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞
    GET_FILE_ONLY, CHOOSE_SUBJECT_FOR_FILE, CHOOSE_DATE_FOR_FILE,

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó
    GROUP_HW_MENU,
    GET_GROUP_HW_TEXT, CHOOSE_GROUP_HW_SUBJECT, CHOOSE_GROUP_HW_DATE_OPTION,
    GET_GROUP_FILE_ONLY, CHOOSE_SUBJECT_FOR_GROUP_FILE, CHOOSE_DATE_FOR_GROUP_FILE,
    EDIT_GROUP_HW_CHOOSE_SUBJECT, EDIT_GROUP_HW_GET_DATE, EDIT_GROUP_HW_MENU,
    EDIT_GROUP_HW_REPLACE_TEXT, ADD_TEXTBOOK_CHOOSE_SUBJECT, GET_TEXTBOOK_FILE, CHOOSE_SUMMARY_SUBJECT, CHOOSE_SUMMARY_FILE, GET_PAGE_NUMBERS,
    CONFIRM_SUMMARY_GENERATION
) = range(34)

async def error_handler(update: object, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç–∞–º–∏."""
    logger.error("Exception while handling an update:", exc_info=context.error)




def get_creds():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ token.pickle."""
    creds = None
    if os.path.exists('.venv/token.pickle'):
        with open('.venv/token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if creds and creds.expired and creds.refresh_token:
        creds.refresh(Request())
    return creds

def get_calendar_service(user_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Calendar API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if config.DEBUG_MODE:
        creds = auth_web.load_credentials("debug")
    else:
        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        creds = auth_web.load_credentials(user_id)

    if not creds:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è user_id: {user_id}")
        return None
    try:
        return build('calendar', 'v3', credentials=creds)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è user_id {user_id}: {e}")
        return None

def get_drive_service(user_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Drive API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ auth_web –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if config.DEBUG_MODE:
        creds = auth_web.load_credentials("debug")
    else:
        creds = auth_web.load_credentials(user_id)
    if not creds:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è user_id: {user_id}")
        return None
    try:
        return build('drive', 'v3', credentials=creds)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ Google Drive –¥–ª—è user_id {user_id}: {e}")
        return None


def upload_file_to_drive(user_id: int, file_name: str, file_bytes: bytes) -> dict | None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ Google Drive –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ.
    """
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    drive_service = get_drive_service(user_id)
    if not drive_service:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å Google Drive –¥–ª—è user_id: {user_id}")
        return None

    try:
        # (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
        folder_id = None
        q = "mimeType='application/vnd.google-apps.folder' and name='–î–ó –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç–∞' and trashed=false"
        response = drive_service.files().list(q=q, spaces='drive', fields='files(id, name)').execute()

        if not response.get('files'):
            folder_metadata = {'name': '–î–ó –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç–∞', 'mimeType': 'application/vnd.google-apps.folder'}
            folder = drive_service.files().create(body=folder_metadata, fields='id').execute()
            folder_id = folder.get('id')
        else:
            folder_id = response.get('files')[0].get('id')

        file_metadata = {'name': file_name, 'parents': [folder_id]}
        media = MediaIoBaseUpload(BytesIO(file_bytes), mimetype='application/octet-stream', resumable=True)
        file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id, webViewLink, mimeType'
        ).execute()
        file_id = file.get('id')

        drive_service.permissions().create(fileId=file_id, body={'type': 'anyone', 'role': 'reader'}).execute()

        return {
            'fileUrl': file.get('webViewLink'),
            'title': file_name,
            'mimeType': file.get('mimeType'),
            'fileId': file_id
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive –¥–ª—è user_id {user_id}: {e}")
        return None

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é ---

async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –∏ '–í–æ–π—Ç–∏'."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_id = update.effective_user.id

    if config.DEBUG_MODE:
        # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        await update.message.reply_text("ü§ñ –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        await main_menu(update, context)
        return

    creds = auth_web.load_credentials(user_id)

    if creds and not creds.expired:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–æ—à–µ–ª, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        await main_menu(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏
        keyboard = [
            [InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
            [InlineKeyboardButton("–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", callback_data="login")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∑–∞–ø–∏—Å—å—é –¥–∑. –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –≥—É–≥–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å."
        await update.message.reply_text(text, reply_markup=reply_markup)

async def start_over_fallback(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é."""
    # await start(update, context)
    return ConversationHandler.END


async def quick_login(update: Update, context: CallbackContext) -> int:
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    auth_web.delete_credentials(user_id)

    flow = auth_web.get_google_auth_flow()
    state = str(user_id)
    authorization_url, _ = flow.authorization_url(access_type='offline', prompt='consent', state=state)

    keyboard = [[InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=authorization_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É Google –ö–∞–ª–µ–Ω–¥–∞—Ä—é:"
    await query.edit_message_text(text, reply_markup=reply_markup)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–≥ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    return ConversationHandler.END

async def main_menu(update: Update, context: CallbackContext, force_new_message: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="schedule_menu")],
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–ó", callback_data="homework_management_menu")],
        [InlineKeyboardButton("ü§ñ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –î–ó", callback_data="summary_start")],
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏ —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="logout")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.callback_query and not force_new_message:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)


async def back_to_main_menu(update: Update, context: CallbackContext) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await main_menu(update, context)
    return ConversationHandler.END


async def login(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–∫–∏."""
    flow = auth_web.get_google_auth_flow()
    state = str(update.effective_user.id)
    authorization_url, _ = flow.authorization_url(access_type='offline', prompt='consent', state=state)

    keyboard = [[InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=authorization_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É Google –ö–∞–ª–µ–Ω–¥–∞—Ä—é:"
    await update.message.reply_text(text, reply_markup=reply_markup)


# --- –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞ ---
async def register_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    auth_web.delete_credentials(user_id)

    await query.edit_message_text(
        text="–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é."
    )
    return GET_NAME


async def logout_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")

    user_id = update.effective_user.id
    auth_web.delete_credentials(user_id)

    await query.edit_message_text(
        text="–î–ª—è –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é."
    )
    return GET_NAME


async def get_name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email."""
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Google email.")
    return GET_EMAIL


async def get_email_and_register(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç email, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –∏ –¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–∫–∏."""
    context.user_data['email'] = update.message.text
    user_name = context.user_data.get('name')
    user_email = context.user_data.get('email')

    try:
        message_to_admin = (
            f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ!\n\n"
            f"–ò–º—è: {user_name}\n"
            f"Email: {user_email}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç email –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Google Cloud."
        )
        await context.bot.send_message(chat_id=config.DEVELOPER_TELEGRAM_ID, text=message_to_admin)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    flow = auth_web.get_google_auth_flow()
    state = str(update.effective_user.id)
    authorization_url, _ = flow.authorization_url(access_type='offline', prompt='consent', state=state)

    keyboard = [[InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=authorization_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "**–î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è**, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)
    context.user_data.clear()
    return ConversationHandler.END

# --- –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (—Å–æ–∑–¥–∞–Ω–∏–µ) ---

def create_semester_schedule_blocking(user_id) -> int:
    """
    –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º batch-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏.
    """
    service = get_calendar_service(user_id)
    if not service:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è user_id {user_id} –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.")
        return 0

    events_created_count = 0

    def batch_callback(request_id, response, exception):
        """Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        nonlocal events_created_count
        if exception is None:
            events_created_count += 1
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ batch-–∑–∞–ø—Ä–æ—Å–µ: {exception}")

    batch = service.new_batch_http_request(callback=batch_callback)
    requests_in_batch = 0

    today = datetime.date.today()
    start_date = today - datetime.timedelta(days=today.weekday())
    end_date = datetime.date(2025, 12, 31)
    day_map = {'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–í—Ç–æ—Ä–Ω–∏–∫': 1, '–°—Ä–µ–¥–∞': 2, '–ß–µ—Ç–≤–µ—Ä–≥': 3, '–ü—è—Ç–Ω–∏—Ü–∞': 4}
    day_names_rus = list(day_map.keys())

    current_date = start_date
    while current_date <= end_date:
        weekday_index = current_date.weekday()
        if weekday_index >= len(day_names_rus):
            current_date += datetime.timedelta(days=1)
            continue
        day_name = day_names_rus[weekday_index]
        if day_name in config.SCHEDULE_DATA:
            semester_start_ref_date = datetime.date(current_date.year, 9,
                                                    1) if current_date.month >= 9 else datetime.date(
                current_date.year - 1, 9, 1)
            semester_start_monday = semester_start_ref_date - datetime.timedelta(days=semester_start_ref_date.weekday())
            current_date_monday = current_date - datetime.timedelta(days=current_date.weekday())
            weeks_diff = (current_date_monday - semester_start_monday).days // 7
            week_type = "–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è" if weeks_diff % 2 == 0 else "–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"

            if week_type in config.SCHEDULE_DATA[day_name]:
                for lesson in config.SCHEDULE_DATA[day_name][week_type]:
                    time_parts = [t.strip() for t in lesson["time"].split('‚Äì')]
                    start_h, start_m = map(int, time_parts[0].split(':'))
                    end_h, end_m = map(int, time_parts[1].split(':'))
                    start_datetime = datetime.datetime.combine(current_date, datetime.time(start_h, start_m))
                    end_datetime = datetime.datetime.combine(current_date, datetime.time(end_h, end_m))
                    event = {
                        'summary': f'{lesson["subject"]} ({lesson["room"]})',
                        'description': f'–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson["teacher"]}',
                        'start': {'dateTime': start_datetime.isoformat(), 'timeZone': 'Europe/Moscow'},
                        'end': {'dateTime': end_datetime.isoformat(), 'timeZone': 'Europe/Moscow'},
                        'colorId': config.COLOR_MAP.get(lesson["type"], "9"),
                    }
                    batch.add(service.events().insert(calendarId='primary', body=event))
                    requests_in_batch += 1

                    if requests_in_batch >= 50:
                        try:
                            batch.execute()
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ batch-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ: {e}")

                        batch = service.new_batch_http_request(callback=batch_callback)
                        requests_in_batch = 0

        current_date += datetime.timedelta(days=1)

    if requests_in_batch > 0:
        try:
            batch.execute()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ batch-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ: {e}")

    return events_created_count


async def schedule_menu(update: Update, context: CallbackContext) -> int:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."""
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="create_schedule")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="delete_schedule")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º?', reply_markup=reply_markup)
    return SCHEDULE_MENU


async def create_schedule_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    query = update.callback_query
    user_id = update.effective_user.id

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
    service = get_calendar_service(user_id)
    if not service:
        await query.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", show_alert=True)
        return ConversationHandler.END

    await query.answer()
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")

    loop = asyncio.get_running_loop()
    events_created = await loop.run_in_executor(
        None, create_semester_schedule_blocking, user_id
    )
    color_legend = (
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
        f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {events_created}\n\n"
        "üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:\n"
        "üü¶ –õ–µ–∫—Ü–∏–∏\n"
        "üü• –°–µ–º–∏–Ω–∞—Ä—ã\n"
        "üü© –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
    )
    keyboard = [[InlineKeyboardButton("¬´ –í –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(color_legend, reply_markup=reply_markup)
    return SCHEDULE_MENU

# --- –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (—É–¥–∞–ª–µ–Ω–∏–µ) ---

def delete_schedule_blocking(user_id) -> int:
    """
    –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º batch-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏.
    """
    service = get_calendar_service(user_id)
    if not service:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è user_id {user_id} –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.")
        return 0

    bot_subjects = {lesson['subject'] for day in config.SCHEDULE_DATA.values() for week in day.values() for lesson in
                    week}
    end_date = datetime.date(2025, 12, 31)
    today = datetime.date.today()
    start_date = today - datetime.timedelta(days=today.weekday())
    time_min = datetime.datetime.combine(start_date, datetime.time.min).isoformat() + 'Z'
    time_max = datetime.datetime.combine(end_date, datetime.time.max).isoformat() + 'Z'

    events_to_delete = []
    page_token = None
    while True:
        try:
            events_result = service.events().list(
                calendarId='primary', timeMin=time_min, timeMax=time_max,
                singleEvents=True, pageToken=page_token, maxResults=2500
            ).execute()
            events = events_result.get('items', [])
            for event in events:
                summary = event.get('summary', '')
                match = re.search(r'^(.*)\s\(', summary)
                if match:
                    subject_name = match.group(1).strip().replace(config.HOMEWORK_TITLE_TAG, "").strip()
                    if subject_name in bot_subjects:
                        events_to_delete.append(event['id'])
            page_token = events_result.get('nextPageToken')
            if not page_token:
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            break

    if not events_to_delete:
        return 0

    deleted_count = 0

    def batch_callback(request_id, response, exception):
        nonlocal deleted_count
        if exception is None:
            deleted_count += 1
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ batch-–∑–∞–ø—Ä–æ—Å–µ: {exception}")

    batch = service.new_batch_http_request(callback=batch_callback)
    requests_in_batch = 0

    for event_id in events_to_delete:
        batch.add(service.events().delete(calendarId='primary', eventId=event_id))
        requests_in_batch += 1
        if requests_in_batch >= 50:
            try:
                batch.execute()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ batch-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {e}")

            batch = service.new_batch_http_request(callback=batch_callback)
            requests_in_batch = 0

    if requests_in_batch > 0:
        try:
            batch.execute()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ batch-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {e}")

    return deleted_count


async def delete_schedule_confirm(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
        [InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="schedule_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –±–æ—Ç–æ–º?",
        reply_markup=reply_markup
    )
    return CONFIRM_DELETE_SCHEDULE


async def run_schedule_deletion(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    query = update.callback_query
    user_id = update.effective_user.id

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ---
    service = get_calendar_service(user_id)
    if not service:
        await query.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", show_alert=True)
        return ConversationHandler.END

    await query.answer()
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")

    loop = asyncio.get_running_loop()
    deleted_count = await loop.run_in_executor(
        None, delete_schedule_blocking, user_id
    )
    await query.edit_message_text(
        f"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {deleted_count}",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("¬´ –í –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="schedule_menu")]])
    )
    return SCHEDULE_MENU


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –î–ó ---
async def add_textbook_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–±–Ω–∏–∫–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç."""
    query = update.callback_query
    await query.answer()

    # –ë–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    subjects = sorted(list(set(l['subject'] for d in config.SCHEDULE_DATA.values() for w in d.values() for l in w)))
    context.user_data['subjects_list'] = subjects

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    buttons = [[InlineKeyboardButton(name, callback_data=f"textbook_subj_{i}")] for i, name in enumerate(subjects)]

    await query.edit_message_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω–∏–∫:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    return ADD_TEXTBOOK_CHOOSE_SUBJECT


async def add_textbook_choose_subject(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–π–ª."""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ –∫–Ω–æ–ø–∫–∏
    subject_index = int(query.data.split('_')[-1])
    selected_subject = context.user_data['subjects_list'][subject_index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['selected_subject'] = selected_subject

    await query.edit_message_text(
        f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —É—á–µ–±–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{selected_subject}'."
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    return GET_TEXTBOOK_FILE


async def add_textbook_get_file(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –Ω–∞ –¥–∏—Å–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    message = update.message
    user_id = update.effective_user.id

    # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

    doc = message.document
    file_name = doc.file_name

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
    file = await doc.get_file()
    file_bytes = await file.download_as_bytearray()

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    upload_result = await asyncio.to_thread(
        upload_textbook_to_shared_drive, user_id, file_name, bytes(file_bytes)
    )

    if not upload_result:
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ MongoDB
    subject = context.user_data.get('selected_subject')
    file_id = upload_result.get('fileId')

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py
    from database import add_textbook

    add_textbook(subject=subject, file_name=file_name, file_id=file_id)

    await message.reply_text(
        f"‚úÖ –£—á–µ–±–Ω–∏–∫ '{file_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'."
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    context.user_data.clear()
    return ConversationHandler.END




def save_homework_to_event(event: dict, homework_text, service : str = "", is_group_hw: bool = False,
                           attachment_data: dict = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –í–õ–û–ñ–ï–ù–ò–Ø —Å–æ–±—ã—Ç–∏—è —Å –î–ó."""
    description = event.get('description', '')
    summary = event.get('summary', '')
    full_homework_text = homework_text.strip()

    teacher_part, group_hw_part, personal_hw_part = "", "", ""

    if config.GROUP_HOMEWORK_DESC_TAG in description:
        main_part, group_hw_part = description.split(config.GROUP_HOMEWORK_DESC_TAG, 1)
    else:
        main_part = description
    if config.PERSONAL_HOMEWORK_DESC_TAG in main_part:
        teacher_part, personal_hw_part = main_part.split(config.PERSONAL_HOMEWORK_DESC_TAG, 1)
    elif config.PERSONAL_HOMEWORK_DESC_TAG in group_hw_part:
        group_hw_part, personal_hw_part = group_hw_part.split(config.PERSONAL_HOMEWORK_DESC_TAG, 1)
    else:
        teacher_part = main_part

    if is_group_hw:
        group_hw_part = f"\n{full_homework_text}" if full_homework_text else ""
    else:
        personal_hw_part = f"\n{full_homework_text}" if full_homework_text else ""

    new_description = teacher_part.strip()
    if group_hw_part.strip():
        new_description += f"\n\n{config.GROUP_HOMEWORK_DESC_TAG}{group_hw_part}"
    if personal_hw_part.strip():
        new_description += f"\n\n{config.PERSONAL_HOMEWORK_DESC_TAG}{personal_hw_part}"
    event['description'] = new_description.strip()

    if attachment_data:
        new_attachment = {
            "fileUrl": attachment_data['fileUrl'],
            "title": attachment_data['title'],
            "mimeType": attachment_data['mimeType'],
            "fileId": attachment_data['fileId'],
        }
        if 'attachments' in event:
            existing_ids = {att.get('fileId') for att in event['attachments']}
            if new_attachment['fileId'] not in existing_ids:
                event['attachments'].append(new_attachment)
        else:
            event['attachments'] = [new_attachment]

    summary = summary.replace(config.HOMEWORK_TITLE_TAG, "").strip()
    if group_hw_part.strip() or personal_hw_part.strip() or event.get('attachments'):
        event['summary'] = f"{summary}{config.HOMEWORK_TITLE_TAG}"
    else:
        event['summary'] = summary

    service.events().update(
        calendarId='primary',
        eventId=event['id'],
        body=event,
        supportsAttachments=True
    ).execute()

def extract_homework_part(description: str, target_tag: str) -> str:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –î–ó –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ, —Ç–∞–∫ –∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó.
    """
    if target_tag not in description:
        return ""

    # –û—Ç–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç, –∏–¥—É—â–∏–π –ø–æ—Å–ª–µ –Ω–∞—à–µ–≥–æ —Ç–µ–≥–∞
    try:
        after_target_tag = description.split(target_tag, 1)[1]
    except IndexError:
        return ""

    # –ò—â–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏ (–ª–∏—á–Ω—ã–π/–≥—Ä—É–ø–ø–æ–≤–æ–π), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–¥—Ç–∏ –ø–æ—Å–ª–µ –Ω–∞—à–µ–≥–æ
    other_tags = [config.GROUP_HOMEWORK_DESC_TAG, config.PERSONAL_HOMEWORK_DESC_TAG]

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –∏–∑ "–¥—Ä—É–≥–∏—Ö" —Ç–µ–≥–æ–≤
    next_tag_position = -1
    for tag in other_tags:
        if tag == target_tag:
            continue

        position = after_target_tag.find(tag)
        if position != -1:
            if next_tag_position == -1 or position < next_tag_position:
                next_tag_position = position

    # –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π —Ç–µ–≥ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –Ω–µ–º—É
    if next_tag_position != -1:
        return after_target_tag[:next_tag_position].strip()
    else:
        # –ï—Å–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –±–µ—Ä–µ–º –≤—Å–µ –¥–æ –∫–æ–Ω—Ü–∞
        return after_target_tag.strip()


# --- –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –î–ó ---

async def homework_menu(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    return GET_HW_TEXT


async def get_hw_text(update: Update, context: CallbackContext) -> int:
    context.user_data['homework_text'] = update.message.text
    subjects = sorted(list(set(l['subject'] for d in config.SCHEDULE_DATA.values() for w in d.values() for l in w)))

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ---
    if "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏" in subjects:
        subjects.append("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏")
        subjects.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –±—ã–ª –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    context.user_data['subjects_list'] = subjects
    buttons = [[InlineKeyboardButton(name, callback_data=f"hw_subj_{i}")] for i, name in enumerate(subjects)]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSE_HW_SUBJECT



async def choose_hw_subject(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    subject_index = int(query.data.split('_')[-1])
    selected_item = context.user_data['subjects_list'][subject_index]

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É ---
    if selected_item == "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        context.user_data['homework_subject'] = "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏"
        context.user_data['hw_type'] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∫—É"
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        context.user_data['homework_subject'] = selected_item
        context.user_data['hw_type'] = "–°–µ–º–∏–Ω–∞—Ä"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä"
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    keyboard = [[InlineKeyboardButton(button_text, callback_data="find_next_class")]]
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSE_HW_DATE_OPTION


async def choose_hw_type(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è (—Å–µ–º–∏–Ω–∞—Ä/–ª–∞–±–∞) –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()

    hw_type_data = query.data.split('_')[-1]

    if hw_type_data == "seminar":
        context.user_data['hw_type'] = "–°–µ–º–∏–Ω–∞—Ä"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä"
    else:
        context.user_data['hw_type'] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∫—É"

    keyboard = [[InlineKeyboardButton(button_text, callback_data="find_next_class")]]
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSE_HW_DATE_OPTION



async def find_next_class(update: Update, context: CallbackContext) -> int:
    """–ò—â–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ (—Å–µ–º–∏–Ω–∞—Ä –∏–ª–∏ –ª–∞–±—É) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –î–ó."""
    query = update.callback_query
    user_id = update.effective_user.id  # <-- –î–û–ë–ê–í–õ–ï–ù–û

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    service = get_calendar_service(user_id)
    if not service:
        await query.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.", show_alert=True)
        return ConversationHandler.END

    await query.answer()

    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    subject_to_find = context.user_data.get('homework_subject')
    homework_text = context.user_data.get('homework_text')
    color_id_to_find = config.COLOR_MAP.get(class_type)

    await query.edit_message_text(f"–ò—â—É –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ ¬´{class_type}¬ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_to_find}'...")

    search_start_time = datetime.datetime.now(datetime.UTC).isoformat()

    try:
        events_result = service.events().list(
            calendarId='primary', timeMin=search_start_time, singleEvents=True,
            orderBy='startTime', maxResults=250
        ).execute()
        events = events_result.get('items', [])

        for event in events:
            event_summary = event.get('summary', '')
            event_color_id = event.get('colorId')
            match = re.search(r'^(.*?)\s*\(', event_summary)
            event_subject = match.group(1).strip() if match else event_summary.strip()

            if event_subject == subject_to_find and event_color_id == color_id_to_find:
                save_homework_to_event(event=event, service=service, homework_text=homework_text)
                event_date_str = event['start'].get('dateTime', event['start'].get('date'))
                event_date = datetime.datetime.fromisoformat(event_date_str).strftime('%d.%m.%Y')
                await query.edit_message_text(
                    f'–ì–æ—Ç–æ–≤–æ! –î–ó –¥–ª—è "{subject_to_find}" ({class_type.lower()}) –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {event_date}.'
                )
                await main_menu(update, context, force_new_message=True)
                context.user_data.clear()
                return ConversationHandler.END

        await query.edit_message_text(
            f"–ù–µ –Ω–∞—à–µ–ª –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π —Ç–∏–ø–∞ ¬´{class_type}¬ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_to_find}'.")
        return CHOOSE_HW_DATE_OPTION

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–Ω—è—Ç–∏—è: {e}", exc_info=True)
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        context.user_data.clear()
        return ConversationHandler.END


async def get_manual_date_for_hw(update: Update, context: CallbackContext, is_editing: bool = False) -> int:
    user_id = update.effective_user.id  # <-- –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
    service = get_calendar_service(user_id)
    if not service:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª token.pickle —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        context.user_data.clear()
        return ConversationHandler.END

    try:
        day, month = map(int, update.message.text.split('.'))
        target_date = datetime.date(datetime.date.today().year, month, day)
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú")
        return EDIT_HW_GET_DATE if is_editing else CHOOSE_HW_DATE_OPTION

    subject = context.user_data.get('homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    class_color_id = config.COLOR_MAP.get(class_type)

    time_min = datetime.datetime.combine(target_date, datetime.time.min).isoformat() + 'Z'
    time_max = datetime.datetime.combine(target_date, datetime.time.max).isoformat() + 'Z'

    try:
        all_events_today = service.events().list(calendarId='primary', timeMin=time_min, timeMax=time_max,
                                                 singleEvents=True).execute().get('items', [])

        matching_classes = []
        for event in all_events_today:
            event_summary = event.get('summary', '')
            match = re.search(r'^(.*?)\s\(', event_summary)
            event_subject = match.group(1).strip() if match else ''
            if event_subject == subject and event.get('colorId') == class_color_id:
                matching_classes.append(event)

        if not matching_classes:
            await update.message.reply_text(
                f"–ù–∞ {target_date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π —Ç–∏–ø–∞ ¬´{class_type}¬ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'.")
            return EDIT_HW_GET_DATE if is_editing else CHOOSE_HW_DATE_OPTION

        event_to_process = matching_classes[0]

        if is_editing:
            # –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
            context.user_data['event_to_edit'] = event_to_process
            description = event_to_process.get('description', '')
            hw_part = extract_homework_part(description, config.PERSONAL_HOMEWORK_DESC_TAG)
            if not hw_part: hw_part = "–î–ó –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ."
            keyboard = [[InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –î–ó", callback_data="delete_personal_hw")],
                        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="main_menu")]]
            await update.message.reply_text(
                f"–¢–µ–∫—É—â–µ–µ –î–ó:\n\n{hw_part}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –î–ó –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard))
            return EDIT_HW_GET_NEW_TEXT
        else:
            homework_text = context.user_data.get('homework_text')
            save_homework_to_event(event=event_to_process, service=service, homework_text=homework_text)

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f'–ì–æ—Ç–æ–≤–æ! –î–ó –¥–ª—è "{subject}" ({class_type.lower()}) –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ {target_date.strftime("%d.%m.%Y")}.'
            )
            # –ê –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await main_menu(update, context, force_new_message=True)

            context.user_data.clear()
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error with manual date for HW: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        context.user_data.clear()
        return ConversationHandler.END

async def edit_group_hw_get_date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É, –Ω–∞—Ö–æ–¥–∏—Ç —Å–µ–º–∏–Ω–∞—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó."""
    user_id = update.effective_user.id
    service = get_calendar_service(user_id)
    if not service:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return ConversationHandler.END

    try:
        day, month = map(int, update.message.text.split('.'))
        target_date = datetime.date(datetime.date.today().year, month, day)
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú")
        return EDIT_GROUP_HW_GET_DATE

    subject = context.user_data.get('group_homework_subject')
    seminar_color_id = config.COLOR_MAP.get("–°–µ–º–∏–Ω–∞—Ä")
    time_min = datetime.datetime.combine(target_date, datetime.time.min).isoformat() + 'Z'
    time_max = datetime.datetime.combine(target_date, datetime.time.max).isoformat() + 'Z'

    try:
        events = service.events().list(calendarId='primary', timeMin=time_min, timeMax=time_max,
                                       singleEvents=True).execute().get('items', [])
        found_event = None
        for event in events:
            event_summary = event.get('summary', '')
            match = re.search(r'^(.*?)\s\(', event_summary)
            event_subject = match.group(1).strip() if match else ''
            if event_subject == subject and event.get('colorId') == seminar_color_id:
                found_event = event
                break

        if not found_event:
            await update.message.reply_text(
                f"–ù–∞ {target_date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ–º–∏–Ω–∞—Ä–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'.")
            return EDIT_GROUP_HW_GET_DATE

        description = found_event.get('description', '')

        # <<< –í–û–ó–í–†–ê–©–ê–ï–ú –°–¢–ê–†–£–Æ –õ–û–ì–ò–ö–£ –ß–¢–ï–ù–ò–Ø –î–ó >>>
        hw_part = "–ì—Ä—É–ø–ø–æ–≤–æ–µ –î–ó –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ."
        if config.GROUP_HOMEWORK_DESC_TAG in description:
            hw_part = \
                description.split(config.GROUP_HOMEWORK_DESC_TAG, 1)[1].strip().split(config.PERSONAL_HOMEWORK_DESC_TAG,
                                                                                      1)[
                    0].strip()

        keyboard = [
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó", callback_data="delete_group_hw")],
            [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó:\n\n{hw_part}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:",
            reply_markup=reply_markup
        )
        return EDIT_GROUP_HW_GET_NEW_TEXT

    except Exception as e:
        logger.error(f"Error in edit_group_hw_get_date: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END


async def edit_hw_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    subjects = sorted(list(set(l['subject'] for d in config.SCHEDULE_DATA.values() for w in d.values() for l in w)))

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π ---
    if "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏" in subjects:
        subjects.append("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏")
        subjects.sort()
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    context.user_data['subjects_list'] = subjects
    buttons = [[InlineKeyboardButton(name, callback_data=f"edit_hw_subj_{i}")] for i, name in enumerate(subjects)]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –î–ó:", reply_markup=InlineKeyboardMarkup(buttons))
    return EDIT_HW_CHOOSE_SUBJECT


async def edit_hw_choose_subject(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    subject_index = int(query.data.split('_')[-1])
    selected_item = context.user_data['subjects_list'][subject_index]

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É ---
    if selected_item == "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        context.user_data['homework_subject'] = "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏"
        context.user_data['hw_type'] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        context.user_data['homework_subject'] = selected_item
        context.user_data['hw_type'] = "–°–µ–º–∏–Ω–∞—Ä"
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–ó (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):")
    return EDIT_HW_GET_DATE


async def edit_hw_get_date(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ –¥–∞—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –î–ó –∏ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π.
    """
    user_id = update.effective_user.id
    service = get_calendar_service(user_id)
    if not service:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    try:
        day, month = map(int, update.message.text.split('.'))
        target_date = datetime.date(datetime.date.today().year, month, day)
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú")
        return EDIT_HW_GET_DATE

    subject = context.user_data.get('homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    class_color_id = config.COLOR_MAP.get(class_type)
    time_min = datetime.datetime.combine(target_date, datetime.time.min).isoformat() + 'Z'
    time_max = datetime.datetime.combine(target_date, datetime.time.max).isoformat() + 'Z'

    try:
        events = service.events().list(calendarId='primary', timeMin=time_min, timeMax=time_max,
                                       singleEvents=True).execute().get('items', [])
        found_event = None
        for event in events:
            event_summary = event.get('summary', '')
            match = re.search(r'^(.*?)\s\(', event_summary)
            event_subject = match.group(1).strip() if match else ''
            if event_subject == subject and event.get('colorId') == class_color_id:
                found_event = event
                break

        if not found_event:
            await update.message.reply_text(
                f"–ù–∞ {target_date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π —Ç–∏–ø–∞ ¬´{class_type}¬ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'.")
            return EDIT_HW_GET_DATE

        context.user_data['event_to_edit_id'] = found_event['id']
        description = found_event.get('description', '')
        hw_text = extract_homework_part(description, config.PERSONAL_HOMEWORK_DESC_TAG)
        attachments = found_event.get('attachments', [])

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ---
        message_lines = [f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –î–ó –Ω–∞ {target_date.strftime('%d.%m.%Y')}**"]
        message_lines.append("\n**–¢–µ–∫—Å—Ç:**")
        if hw_text:
            message_lines.append(f"```\n{hw_text}\n```")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –±–ª–æ–∫
        else:
            message_lines.append("_–¢–µ–∫—Å—Ç –î–ó –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        message_lines.append("\n**–§–∞–π–ª:**")
        if attachments:
            message_lines.append(f"üìé `{attachments[0]['title']}`")
        else:
            message_lines.append("_–§–∞–π–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω_")

        message_text = "\n".join(message_lines)
        keyboard = [
            [
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_delete_text"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="edit_delete_file")
            ],
            [InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –î–ó", callback_data="edit_replace_text")],
            [InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        return EDIT_HW_MENU

    except Exception as e:
        logger.error(f"Error in edit_hw_get_date: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END


async def edit_delete_text(update: Update, context: CallbackContext) -> int:
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ª–∏—á–Ω–æ–≥–æ –î–ó –∏–∑ —Å–æ–±—ã—Ç–∏—è."""
    query = update.callback_query
    user_id = update.effective_user.id  # <-- –î–û–ë–ê–í–õ–ï–ù–û
    await query.answer()

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    service = get_calendar_service(user_id)
    event_id = context.user_data.get('event_to_edit_id')

    if not service or not event_id:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    event = service.events().get(calendarId='primary', eventId=event_id).execute()
    save_homework_to_event(event, service=service, homework_text="")
    await query.edit_message_text("‚úÖ –¢–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω.")
    await main_menu(update, context, force_new_message=True)
    context.user_data.clear()
    return ConversationHandler.END


async def edit_delete_file(update: Update, context: CallbackContext) -> int:
    """–£–¥–∞–ª—è–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è –∏ —Å Google Drive."""
    query = update.callback_query
    await query.answer()

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    user_id = update.effective_user.id
    service = get_calendar_service(user_id)
    drive_service = get_drive_service(user_id)
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    event_id = context.user_data.get('event_to_edit_id')

    if not all([service, drive_service, event_id]):
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    event = service.events().get(calendarId='primary', eventId=event_id).execute()

    if not event.get('attachments'):
        await query.edit_message_text("‚ùå –£ —ç—Ç–æ–≥–æ –î–ó –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        await main_menu(update, context, force_new_message=True)
        context.user_data.clear()
        return ConversationHandler.END

    file_to_delete = event['attachments'][0]
    file_id = file_to_delete['fileId']

    event['attachments'] = []
    save_homework_to_event(event, service=service, homework_text=extract_homework_part(event.get('description', ''),
                                                                                       config.PERSONAL_HOMEWORK_DESC_TAG))
    try:
        drive_service.files().delete(fileId=file_id).execute()
        await query.edit_message_text(f"‚úÖ –§–∞–π–ª `{file_to_delete['title']}` —É–¥–∞–ª–µ–Ω.", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_id} —Å Google Drive: {e}")
        await query.edit_message_text(f"‚úÖ –í–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å Google Drive.")

    await main_menu(update, context, force_new_message=True)
    context.user_data.clear()
    return ConversationHandler.END
async def edit_replace_text_start(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –î–ó."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
    return EDIT_HW_REPLACE_TEXT



async def edit_hw_get_new_text(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –î–ó –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ."""
    user_id = update.effective_user.id  # <-- –î–û–ë–ê–í–õ–ï–ù–û

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    service = get_calendar_service(user_id)
    event_id = context.user_data.get('event_to_edit_id')

    if not service or not event_id:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
        return ConversationHandler.END

    new_text = update.message.text
    event = service.events().get(calendarId='primary', eventId=event_id).execute()
    save_homework_to_event(
        event,
        service=service,
        homework_text=new_text,
        attachment_data=event.get('attachments', [None])[0]
    )
    await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await main_menu(update, context, force_new_message=True)
    context.user_data.clear()
    return ConversationHandler.END


async def delete_personal_hw(update: Update, context: CallbackContext) -> int:
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—á–Ω–æ–µ –î–ó –∏–∑ —Å–æ–±—ã—Ç–∏—è."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    service = get_calendar_service(user_id)
    if not service or 'event_to_edit' not in context.user_data:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    event_to_edit = context.user_data.get('event_to_edit')
    subject = context.user_data.get('homework_subject')

    save_homework_to_event(event_to_edit, "", service, is_group_hw=False)

    await query.edit_message_text(
        f"–õ–∏—á–Ω–æ–µ –î–ó –¥–ª—è '{subject}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    )
    context.user_data.clear()
    return ConversationHandler.END


# --- –õ–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó (Admin only) ---

async def group_homework_menu(update: Update, context: CallbackContext) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã–º –î–ó."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó", callback_data="group_hw_add_text_start")],
        [InlineKeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã", callback_data="group_hw_add_file_start")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó", callback_data="group_hw_edit_start")],
        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –ö–ù–û–ü–ö–£ ---
        [InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω–∏–∫", callback_data="add_textbook_start")],
        # ---------------------------------
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="homework_management_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–î–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä—É–ø–ø–æ–≤—ã–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º:",
        reply_markup=reply_markup
    )
    return GROUP_HW_MENU

async def edit_group_hw_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó."""
    query = update.callback_query
    await query.answer()
    subjects = sorted(list(set(l['subject'] for d in config.SCHEDULE_DATA.values() for w in d.values() for l in w)))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
    if "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏" in subjects:
        subjects.append("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏")
        subjects.sort()

    context.user_data['subjects_list'] = subjects
    buttons = [[InlineKeyboardButton(name, callback_data=f"edit_group_hw_subj_{i}")] for i, name in enumerate(subjects)]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó:",
                                  reply_markup=InlineKeyboardMarkup(buttons))
    return EDIT_GROUP_HW_CHOOSE_SUBJECT


async def edit_group_hw_choose_subject(update: Update, context: CallbackContext) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É.
    """
    query = update.callback_query
    await query.answer()

    subject_index = int(query.data.split('_')[-1])
    selected_item = context.user_data['subjects_list'][subject_index]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–µ–º–∏–Ω–∞—Ä —ç—Ç–æ –∏–ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if selected_item == "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏":
        context.user_data['homework_subject'] = "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏"
        context.user_data['hw_type'] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
    else:
        context.user_data['homework_subject'] = selected_item
        context.user_data['hw_type'] = "–°–µ–º–∏–Ω–∞—Ä"

    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú), –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return EDIT_GROUP_HW_GET_DATE



async def edit_group_hw_get_new_text(update: Update, context: CallbackContext) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
    subject = context.user_data.get('group_homework_subject')
    new_homework_text = update.message.text
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä') # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø
    target_date = context.user_data.get('target_date') # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞

    # –ü–µ—Ä–µ–¥–∞–µ–º class_type –∏ target_date
    updated_count, _ = await asyncio.to_thread(
        find_and_update_or_delete_group_hw_blocking, subject, new_homework_text, class_type, target_date
    )

    await update.message.reply_text(
        f"–ì—Ä—É–ø–ø–æ–≤–æ–µ –î–ó –¥–ª—è '{subject}' ({class_type.lower()}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    )
    context.user_data.clear()
    return ConversationHandler.END


async def delete_group_hw(update: Update, context: CallbackContext) -> int:
    """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
    subject = context.user_data.get('group_homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø
    target_date = context.user_data.get('target_date')  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É

    # –ü–µ—Ä–µ–¥–∞–µ–º class_type –∏ target_date, –Ω–æ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    updated_count, _ = await asyncio.to_thread(
        find_and_update_or_delete_group_hw_blocking, subject, "", class_type, target_date
    )

    await query.edit_message_text(
        f"–ì—Ä—É–ø–ø–æ–≤–æ–µ –î–ó –¥–ª—è '{subject}' ({class_type.lower()}) —É–¥–∞–ª–µ–Ω–æ —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await main_menu(update, context, force_new_message=True)

    context.user_data.clear()
    return ConversationHandler.END
#-------
# --- –í–µ—Ç–∫–∞: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–ï–ö–°–¢–ê –¥–ª—è –≥—Ä—É–ø–ø—ã ---
async def group_hw_add_text_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –î–ó –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã:")
    return GET_GROUP_HW_TEXT


async def get_manual_date_for_group_hw_text(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    try:
        day, month = map(int, update.message.text.split('.'))
        target_date = datetime.date(datetime.date.today().year, month, day)
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú")
        return CHOOSE_GROUP_HW_DATE_OPTION

    subject = context.user_data.get('group_homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    homework_text = context.user_data.get('group_homework_text')

    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã...")

    updated_count, _ = await asyncio.to_thread(
        update_group_homework_blocking, subject, class_type, target_date, new_text=homework_text
    )

    await update.message.reply_text(
        f"‚úÖ –¢–µ–∫—Å—Ç –î–ó –¥–ª—è '{subject}' –Ω–∞ {target_date.strftime('%d.%m.%Y')} –æ–±–Ω–æ–≤–ª–µ–Ω —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await main_menu(update, context, force_new_message=True)

    context.user_data.clear()
    return ConversationHandler.END

# --- –í–µ—Ç–∫–∞: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –§–ê–ô–õ–ê –¥–ª—è –≥—Ä—É–ø–ø—ã ---
async def group_hw_add_file_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ---
    context.user_data['is_group_file'] = True

    await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã.")
    return GET_GROUP_FILE_ONLY



async def get_manual_date_for_group_hw_file(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    try:
        day, month = map(int, update.message.text.split('.'))
        target_date = datetime.date(datetime.date.today().year, month, day)
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú")
        return CHOOSE_DATE_FOR_GROUP_FILE

    subject = context.user_data.get('homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    file_bytes = context.user_data.get('file_bytes')
    file_name = context.user_data.get('file_name')

    await update.message.reply_text(f"–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –Ω–∞ –≤–∞—à –¥–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª—è—é –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã...")

    attachment_info = await asyncio.to_thread(upload_file_to_drive, file_name, file_bytes)
    if not attachment_info:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ Google Drive.")
        context.user_data.clear()
        return ConversationHandler.END

    updated_count, _ = await asyncio.to_thread(
        update_group_homework_blocking, subject, class_type, target_date, new_attachment=attachment_info
    )

    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª –¥–ª—è '{subject}' –Ω–∞ {target_date.strftime('%d.%m.%Y')} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await main_menu(update, context, force_new_message=True)

    context.user_data.clear()
    return ConversationHandler.END

# --- –í–µ—Ç–∫–∞: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó ---
async def group_hw_edit_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    subjects = sorted(list(set(l['subject'] for d in config.SCHEDULE_DATA.values() for w in d.values() for l in w)))
    if "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏" in subjects:
        subjects.append("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏")
        subjects.sort()
    context.user_data['subjects_list'] = subjects
    buttons = [[InlineKeyboardButton(name, callback_data=f"edit_group_hw_subj_{i}")] for i, name in enumerate(subjects)]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó:",
                                  reply_markup=InlineKeyboardMarkup(buttons))
    return EDIT_GROUP_HW_CHOOSE_SUBJECT


async def edit_group_hw_get_date(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü."""
    user_id = update.effective_user.id
    service = get_calendar_service(user_id)
    if not service:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞.")
        return ConversationHandler.END

    try:
        day, month = map(int, update.message.text.split('.'))
        target_date = datetime.date(datetime.date.today().year, month, day)
        context.user_data['target_date'] = target_date
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú")
        return EDIT_GROUP_HW_GET_DATE

    subject = context.user_data.get('homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    class_color_id = config.COLOR_MAP.get(class_type)
    time_min = datetime.datetime.combine(target_date, datetime.time.min).isoformat() + 'Z'
    time_max = datetime.datetime.combine(target_date, datetime.time.max).isoformat() + 'Z'

    events = service.events().list(calendarId='primary', timeMin=time_min, timeMax=time_max,
                                   singleEvents=True).execute().get('items', [])
    found_event = None
    for event in events:
        event_summary = event.get('summary', '')
        match = re.search(r'^(.*?)\s\(', event_summary)
        event_subject = match.group(1).strip() if match else ''
        if event_subject == subject and event.get('colorId') == class_color_id:
            found_event = event
            break

    if not found_event:
        await update.message.reply_text("–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü.")
        return EDIT_GROUP_HW_GET_DATE

    description = found_event.get('description', '')
    hw_text = extract_homework_part(description, config.GROUP_HOMEWORK_DESC_TAG)
    attachments = found_event.get('attachments', [])

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ---
    message_lines = ["**–¢–µ–∫—É—â–µ–µ –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó:**"]
    if hw_text:
        message_lines.append(f"```\n{hw_text}\n```")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –±–ª–æ–∫
    else:
        message_lines.append("_–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_")
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    if attachments:
        message_lines.append(f"üìé –§–∞–π–ª: `{attachments[0]['title']}`")
    else:
        message_lines.append("_–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_")

    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_group_delete_text")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="edit_group_delete_file")],
        [InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_group_replace_text")],
        [InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="main_menu")]
    ]
    await update.message.reply_text("\n".join(message_lines), reply_markup=InlineKeyboardMarkup(keyboard),
                                    parse_mode='Markdown')
    return EDIT_GROUP_HW_MENU

async def edit_group_delete_text(update: Update, context: CallbackContext) -> int:
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    query = update.callback_query
    await query.answer()

    subject = context.user_data.get('homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    target_date = context.user_data.get('target_date')

    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã...")
    updated_count, _ = await asyncio.to_thread(
        update_group_homework_blocking, subject, class_type, target_date, delete_text=True
    )
    await query.edit_message_text(f"‚úÖ –¢–µ–∫—Å—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó —É–¥–∞–ª–µ–Ω —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await main_menu(update, context, force_new_message=True)

    context.user_data.clear()
    return ConversationHandler.END


async def edit_group_delete_file(update: Update, context: CallbackContext) -> int:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó —É –≤—Å–µ—Ö –∏ —Å –¥–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞."""
    query = update.callback_query
    await query.answer()

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    user_id = update.effective_user.id
    service = get_calendar_service(user_id)
    drive_service = get_drive_service(user_id)
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    subject = context.user_data.get('homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    target_date = context.user_data.get('target_date')

    time_min = datetime.datetime.combine(target_date, datetime.time.min).isoformat() + 'Z'
    time_max = datetime.datetime.combine(target_date, datetime.time.max).isoformat() + 'Z'
    class_color_id = config.COLOR_MAP.get(class_type)

    events = service.events().list(calendarId='primary', timeMin=time_min, timeMax=time_max,
                                   singleEvents=True).execute().get('items', [])
    found_event = None
    for event in events:
        event_summary = event.get('summary', '')
        match = re.search(r'^(.*?)\s\(', event_summary)
        event_subject = match.group(1).strip() if match else ''
        if event_subject == subject and event.get('colorId') == class_color_id:
            found_event = event
            break

    if found_event and found_event.get('attachments'):
        try:
            file_to_delete = found_event['attachments'][0]
            file_id = file_to_delete.get('fileId')
            drive_service.files().delete(fileId=file_id).execute()
            logger.info(f"–§–∞–π–ª {file_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å –¥–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞.")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å Google Drive –∞–¥–º–∏–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω): {e}")

    updated_count, _ = await asyncio.to_thread(
        update_group_homework_blocking, subject, class_type, target_date, delete_attachment=True
    )

    await query.edit_message_text(f"‚úÖ –§–∞–π–ª –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó —É–¥–∞–ª–µ–Ω —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await main_menu(update, context, force_new_message=True)
    context.user_data.clear()
    return ConversationHandler.END

async def edit_group_replace_text_start(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–æ—Å–∏—Ç –∞–¥–º–∏–Ω–∞ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó.")
    return EDIT_GROUP_HW_REPLACE_TEXT


async def edit_group_get_new_text(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã."""
    new_text = update.message.text
    subject = context.user_data.get('homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    target_date = context.user_data.get('target_date')

    await update.message.reply_text("–û–±–Ω–æ–≤–ª—è—é —Ç–µ–∫—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã...")
    updated_count, _ = await asyncio.to_thread(
        update_group_homework_blocking, subject, class_type, target_date, new_text=new_text
    )
    await update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó –æ–±–Ω–æ–≤–ª–µ–Ω —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await main_menu(update, context, force_new_message=True)

    context.user_data.clear()
    return ConversationHandler.END


def update_group_homework_blocking(subject: str, class_type: str, target_date: datetime.date = None, *,
                                   new_text: str = None, delete_text: bool = False,
                                   new_attachment: dict = None, delete_attachment: bool = False) -> tuple[int, list]:
    """
    –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –î–ó –¥–ª—è –í–°–ï–• –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    updated_count = 0
    failed_users = []

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    try:
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = [
            int(f.split('_')[1].split('.')[0])
            for f in os.listdir(auth_web.TOKEN_DIR)
            if f.startswith('token_') and f.endswith('.json')
        ]
        if not user_ids:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –ø–∞–ø–∫–µ tokens.")
            return 0, []
    except (FileNotFoundError, IndexError):
        logger.error(f"–ü–∞–ø–∫–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ {auth_web.TOKEN_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return 0, []

    class_color_id = config.COLOR_MAP.get(class_type)

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ---
    for user_id in user_ids:
        try:
            service = get_calendar_service(user_id)
            if not service:
                failed_users.append(str(user_id))
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
            time_min, time_max, order_by = None, None, None
            if target_date:
                time_min = datetime.datetime.combine(target_date, datetime.time.min).isoformat() + 'Z'
                time_max = datetime.datetime.combine(target_date, datetime.time.max).isoformat() + 'Z'
            else:
                # –ò—â–µ–º –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                time_min = datetime.datetime.now(datetime.UTC).isoformat()
                order_by = 'startTime'

            # –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            events = service.events().list(
                calendarId='primary', timeMin=time_min, timeMax=time_max,
                singleEvents=True, orderBy=order_by, maxResults=250
            ).execute().get('items', [])

            found_event = None
            for event in events:
                event_summary = event.get('summary', '')
                match = re.search(r'^(.*?)\s\(', event_summary)
                event_subject = match.group(1).strip() if match else ''
                if event_subject == subject and event.get('colorId') == class_color_id:
                    found_event = event
                    break

            if found_event:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                final_text = "" if delete_text else new_text if new_text is not None else extract_homework_part(
                    found_event.get('description', ''), config.GROUP_HOMEWORK_DESC_TAG)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ
                final_attachment = None if delete_attachment else new_attachment if new_attachment is not None else (
                    found_event.get('attachments', [None])[0])

                save_homework_to_event(
                    event=found_event, service=service, homework_text=final_text,
                    attachment_data=final_attachment, is_group_hw=True
                )
                updated_count += 1
            else:
                logger.warning(f"–°–æ–±—ã—Ç–∏–µ '{subject}' –¥–ª—è user_id {user_id} –Ω–∞ –¥–∞—Ç—É '{target_date}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –î–ó –¥–ª—è user_id {user_id}: {e}")
            failed_users.append(str(user_id))

    return updated_count, failed_users

async def group_homework_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –î–ó –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã:")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ –î–ó
    context.user_data['is_group_hw'] = True
    return GET_GROUP_HW_TEXT


async def find_next_class_for_group_hw_text(update: Update, context: CallbackContext) -> int:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    query = update.callback_query
    await query.answer()

    subject = context.user_data.get('group_homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    homework_text = context.user_data.get('group_homework_text')

    await query.edit_message_text(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∑–∞–Ω—è—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã...")

    updated_count, _ = await asyncio.to_thread(
        update_group_homework_blocking, subject, class_type, target_date=None, new_text=homework_text
    )

    await query.edit_message_text(
        f"‚úÖ –¢–µ–∫—Å—Ç –î–ó –¥–ª—è '{subject}' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await main_menu(update, context, force_new_message=True)

    context.user_data.clear()
    return ConversationHandler.END


async def find_next_class_for_group_hw_file(update: Update, context: CallbackContext) -> int:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    query = update.callback_query
    await query.answer()

    subject = context.user_data.get('homework_subject')

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –ë—ã–ª–æ: context.user_a
    # –°—Ç–∞–ª–æ: context.user_data
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')

    file_bytes = context.user_data.get('file_bytes')
    file_name = context.user_data.get('file_name')

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –µ–≥–æ –¥–∏—Å–∫ ---
    user_id = update.effective_user.id

    await query.edit_message_text(f"–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –∏ –∏—â—É —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã...")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ ---
    attachment_info = await asyncio.to_thread(upload_file_to_drive, user_id, file_name, file_bytes)
    if not attachment_info:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ Google Drive.")
        context.user_data.clear()
        return ConversationHandler.END

    updated_count, _ = await asyncio.to_thread(
        update_group_homework_blocking, subject, class_type, target_date=None, new_attachment=attachment_info
    )

    await query.edit_message_text(
        f"‚úÖ –§–∞–π–ª –¥–ª—è '{subject}' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )

    await main_menu(update, context, force_new_message=True)

    context.user_data.clear()
    return ConversationHandler.END

async def get_group_hw_text(update: Update, context: CallbackContext) -> int:
    context.user_data['group_homework_text'] = update.message.text
    subjects = sorted(list(set(l['subject'] for d in config.SCHEDULE_DATA.values() for w in d.values() for l in w)))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π
    if "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏" in subjects:
        subjects.append("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏")
        subjects.sort()

    context.user_data['subjects_list'] = subjects
    buttons = [[InlineKeyboardButton(name, callback_data=f"group_hw_subj_{i}")] for i, name in enumerate(subjects)]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSE_GROUP_HW_SUBJECT


async def choose_group_hw_subject(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    subject_index = int(query.data.split('_')[-1])
    selected_item = context.user_data['subjects_list'][subject_index]

    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø
    if selected_item == "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏":
        context.user_data['group_homework_subject'] = "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏"
        context.user_data['hw_type'] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∫—É"
    else:
        context.user_data['group_homework_subject'] = selected_item
        context.user_data['hw_type'] = "–°–µ–º–∏–Ω–∞—Ä"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä"

    keyboard = [[InlineKeyboardButton(button_text, callback_data="find_next_class_group_text")]]
    await query.edit_message_text(
        "–ö—É–¥–∞ –∑–∞–ø–∏—Å–∞—Ç—å –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã? –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSE_GROUP_HW_DATE_OPTION


async def find_next_seminar_for_group(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    await query.edit_message_text(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ ¬´{class_type}¬ª. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")

    subject = context.user_data.get('group_homework_subject')
    homework_text = context.user_data.get('group_homework_text')

    # –ü–µ—Ä–µ–¥–∞–µ–º class_type –≤ –±–ª–æ–∫–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    updated_count, failed_users = await asyncio.to_thread(
        find_and_update_or_delete_group_hw_blocking, subject, homework_text, class_type
    )

    result_text = f"–ó–∞–ø–∏—Å—å –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    if failed_users:
        result_text += f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–ª—è {len(failed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    await query.edit_message_text(
        result_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    )
    context.user_data.clear()
    return ConversationHandler.END


async def get_manual_date_for_group_hw(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó."""
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    await update.message.reply_text(f"–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –∑–∞–Ω—è—Ç–∏—è ¬´{class_type}¬ª... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")

    subject = context.user_data.get('group_homework_subject')
    homework_text = context.user_data.get('group_homework_text')

    try:
        day, month = map(int, update.message.text.split('.'))
        target_date = datetime.date(datetime.date.today().year, month, day)
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú")
        return CHOOSE_GROUP_HW_DATE_OPTION

    # –ü–µ—Ä–µ–¥–∞–µ–º class_type –∏ target_date –≤ –±–ª–æ–∫–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    updated_count, _ = await asyncio.to_thread(
        find_and_update_or_delete_group_hw_blocking, subject, homework_text, class_type, target_date
    )

    if updated_count > 0:
        await update.message.reply_text(
            f"–ì—Ä—É–ø–ø–æ–≤–æ–µ –î–ó –¥–ª—è '{subject}' ({class_type.lower()}) –Ω–∞ {target_date.strftime('%d.%m.%Y')} –∑–∞–ø–∏—Å–∞–Ω–æ –¥–ª—è {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    else:
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç–∏—è —Ç–∏–ø–∞ ¬´{class_type}¬ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}' –Ω–∞ {target_date.strftime('%d.%m.%Y')} –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return CHOOSE_GROUP_HW_DATE_OPTION

    context.user_data.clear()
    return ConversationHandler.END


async def send_main_menu_on_auth_success(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±."""
    user_id = context.job.data

    if context.user_data:
        context.user_data.clear()

    keyboard = [
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="schedule_menu")],
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–ó", callback_data="homework_management_menu")],
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏ —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="logout")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=user_id,
        text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.",
        reply_markup=reply_markup
    )


async def http_auth_callback(request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π HTTP-–∑–∞–ø—Ä–æ—Å –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    try:
        data = await request.json()
        user_id = data.get('user_id')
        if not user_id:
            return web.Response(status=400, text="user_id is required")

        logging.info(f"–ü–æ–ª—É—á–µ–Ω HTTP-–∫–æ–ª–ª–±—ç–∫ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è user_id: {user_id}")

        app_instance = request.app['bot_app']
        app_instance.job_queue.run_once(send_main_menu_on_auth_success, 0, data=user_id)

        return web.Response(status=200, text="OK")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ http_auth_callback: {e}")
        return web.Response(status=500, text="Internal Server Error")



async def test_button_press(update: Update, context: CallbackContext) -> None:
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."""
    print("!!!!!!!!!!!!!!!!! –ö–ù–û–ü–ö–ê '–ó–∞–ø–∏—Å–∞—Ç—å –î–ó –¥–ª—è –≥—Ä—É–ø–ø—ã' –ë–´–õ–ê –ù–ê–ñ–ê–¢–ê !!!!!!!!!!!!!!!!!!")
    query = update.callback_query
    await query.answer("–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!", show_alert=True)


async def start_work_handler(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="schedule_menu")],
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–ó", callback_data="homework_management_menu")],
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏ —Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="logout")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await query.edit_message_text(text, reply_markup=reply_markup)




async def homework_management_menu_dispatcher(update: Update, context: CallbackContext) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –î–ó —Å –≤—ã–±–æ—Ä–æ–º '–°–≤–æ–µ' –∏–ª–∏ '–ì—Ä—É–ø–ø–æ–≤–æ–µ'."""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    keyboard = [[InlineKeyboardButton("–ú–æ–µ –î–ó", callback_data="personal_hw_menu")]]
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó
    if user_id in config.ADMIN_IDS or config.DEBUG_MODE:
        keyboard.append([InlineKeyboardButton("–ì—Ä—É–ø–ø–æ–≤–æ–µ –î–ó", callback_data="group_hw_menu")])

    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=reply_markup)

    return HOMEWORK_MENU



async def personal_homework_menu(update: Update, context: CallbackContext) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º –î–ó."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –î–ó", callback_data="homework_add_start")],
        [InlineKeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="add_file_start")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –î–ó", callback_data="homework_edit_start")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="homework_management_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text="–î–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º:",
        reply_markup=reply_markup
    )
    return PERSONAL_HW_MENU


# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–¢–û–ö–ê "–î–û–ë–ê–í–ò–¢–¨ –§–ê–ô–õ" ---

async def add_file_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ), –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∑–∞–Ω—è—Ç–∏—é."
    )
    return GET_FILE_ONLY


async def get_file_only(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–∞–º—è—Ç–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç."""
    message = update.message
    file_to_upload = None
    file_name = "—Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    if message.document:
        file_to_upload = await message.document.get_file()
        file_name = message.document.file_name
    elif message.photo:
        file_to_upload = await message.photo[-1].get_file()
        file_name = f"photo_{file_to_upload.file_unique_id}.jpg"

    if not file_to_upload:
        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–∞
        return GET_GROUP_FILE_ONLY if context.user_data.get('is_group_file') else GET_FILE_ONLY

    file_bytes = await file_to_upload.download_as_bytearray()
    context.user_data['file_bytes'] = bytes(file_bytes)
    context.user_data['file_name'] = file_name
    await message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!")

    subjects = sorted(list(set(l['subject'] for d in config.SCHEDULE_DATA.values() for w in d.values() for l in w)))
    if "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏" in subjects:
        subjects.append("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏")
        subjects.sort()
    context.user_data['subjects_list'] = subjects

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –î–ó ---
    is_group = context.user_data.get('is_group_file', False)
    callback_prefix = "group_file_subj_" if is_group else "file_subj_"
    next_state = CHOOSE_SUBJECT_FOR_GROUP_FILE if is_group else CHOOSE_SUBJECT_FOR_FILE

    buttons = [[InlineKeyboardButton(name, callback_data=f"{callback_prefix}{i}")] for i, name in enumerate(subjects)]
    await update.message.reply_text("–ö –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª?", reply_markup=InlineKeyboardMarkup(buttons))

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if is_group:
        context.user_data.pop('is_group_file')

    return next_state


async def choose_subject_for_file(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    subject_index = int(query.data.split('_')[-1])
    selected_item = context.user_data['subjects_list'][subject_index]

    if selected_item == "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏":
        context.user_data['homework_subject'] = "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏"
        context.user_data['hw_type'] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∫—É"
    else:
        context.user_data['homework_subject'] = selected_item
        context.user_data['hw_type'] = "–°–µ–º–∏–Ω–∞—Ä"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä"

    keyboard = [[InlineKeyboardButton(button_text, callback_data="find_next_class_for_file")]]
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSE_DATE_FOR_FILE

#--------

def upload_textbook_to_shared_drive(user_id: int, file_name: str, file_bytes: bytes) -> dict | None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —É—á–µ–±–Ω–∏–∫–∞ –≤ –û–ë–©–£–Æ –ø–∞–ø–∫—É –Ω–∞ Google Drive –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.
    """
    drive_service = get_drive_service(user_id)
    if not drive_service:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å Google Drive –¥–ª—è user_id: {user_id}")
        return None

    try:
        # ID –æ–±—â–µ–π –ø–∞–ø–∫–∏ –¥–ª—è —É—á–µ–±–Ω–∏–∫–æ–≤ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        folder_id = config.TEXTBOOKS_DRIVE_FOLDER_ID

        print(f"--- DEBUG: –ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ø–∞–ø–∫—É —Å ID: '{folder_id}' ---")

        file_metadata = {'name': file_name, 'parents': [folder_id]}
        media = MediaIoBaseUpload(BytesIO(file_bytes), mimetype='application/pdf', resumable=True)

        file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id, name'  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∏ –∏–º—è
        ).execute()

        file_id = file.get('id')

        # –í–∞–∂–Ω–æ: –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
        drive_service.permissions().create(fileId=file_id, body={'type': 'anyone', 'role': 'reader'}).execute()

        logger.info(f"–£—á–µ–±–Ω–∏–∫ '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ Google Drive —Å ID: {file_id}")
        return {'fileId': file_id, 'fileName': file.get('name')}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–µ–±–Ω–∏–∫–∞ –Ω–∞ Google Drive: {e}")
        return None

async def add_textbook_wrong_file(update: Update, context: CallbackContext) -> None:
    """–°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞."""
    await update.message.reply_text(
        "‚ùå –≠—Ç–æ –Ω–µ PDF-—Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —É—á–µ–±–Ω–∏–∫ –∏–º–µ–Ω–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF."
    )
# -------------------------
async def choose_subject_for_group_file(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É."""
    query = update.callback_query
    await query.answer()
    subject_index = int(query.data.split('_')[-1])
    selected_item = context.user_data['subjects_list'][subject_index]

    if selected_item == "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏":
        context.user_data['homework_subject'] = "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏"
        context.user_data['hw_type'] = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∫—É"
    else:
        context.user_data['homework_subject'] = selected_item
        context.user_data['hw_type'] = "–°–µ–º–∏–Ω–∞—Ä"
        button_text = "–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä"

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ callback_data –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ì–†–£–ü–ü–´ ---
    keyboard = [[InlineKeyboardButton(button_text, callback_data="find_next_class_for_group_file")]]
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSE_DATE_FOR_GROUP_FILE

async def save_file_to_event_logic(update: Update, context: CallbackContext, event: dict, user_id: int) -> int:
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–≥–æ –≤ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    service = get_calendar_service(user_id)
    drive_service = get_drive_service(user_id) # drive_service –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç

    file_bytes = context.user_data.get('file_bytes')
    file_name = context.user_data.get('file_name')
    subject = context.user_data.get('homework_subject')

    if not all([service, drive_service, file_bytes, file_name, subject, event]):
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    message_to_edit = None
    if update.callback_query:
        message_to_edit = await update.callback_query.edit_message_text(f"–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª '{file_name}' –Ω–∞ –≤–∞—à Google Drive...")
    else:
        message_to_edit = await update.message.reply_text(f"–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª '{file_name}' –Ω–∞ –≤–∞—à Google Drive...")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ ---
    attachment_info = await asyncio.to_thread(
        upload_file_to_drive, user_id, file_name, file_bytes
    )

    if not attachment_info:
        await message_to_edit.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ Google Drive. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–∫–ª—é—á–µ–Ω –ª–∏ Drive API –≤ Google Console."
        )
        context.user_data.clear()
        return ConversationHandler.END

    existing_description = event.get('description', '')
    existing_hw_text = extract_homework_part(existing_description, config.PERSONAL_HOMEWORK_DESC_TAG)

    save_homework_to_event(
        event=event,
        service=service,
        homework_text=existing_hw_text,
        attachment_data=attachment_info
    )

    event_date_str = event['start'].get('dateTime', event['start'].get('date'))
    event_date = datetime.datetime.fromisoformat(event_date_str).strftime('%d.%m.%Y')
    await message_to_edit.edit_text(
        f'–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –¥–ª—è "{subject}" –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∑–∞–Ω—è—Ç–∏—é –Ω–∞ {event_date}.'
    )
    await main_menu(update, context, force_new_message=True)
    context.user_data.clear()
    return ConversationHandler.END

async def find_next_class_for_file(update: Update, context: CallbackContext) -> int:
    """–ò—â–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
    query = update.callback_query
    user_id = update.effective_user.id # <-- –î–û–ë–ê–í–õ–ï–ù–û

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    service = get_calendar_service(user_id)
    if not service:
        await query.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", show_alert=True)
        return ConversationHandler.END

    await query.answer()

    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    subject = context.user_data.get('homework_subject')
    class_color_id = config.COLOR_MAP.get(class_type)

    await query.edit_message_text(f"–ò—â—É –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ ¬´{class_type}¬ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'...")

    search_start_time = datetime.datetime.now(datetime.UTC).isoformat()

    try:
        events_result = service.events().list(
            calendarId='primary', timeMin=search_start_time, singleEvents=True,
            orderBy='startTime', maxResults=250
        ).execute()
        events = events_result.get('items', [])
        for event in events:
            event_summary = event.get('summary', '')
            match = re.search(r'^(.*?)\s\(', event_summary)
            event_subject = match.group(1).strip() if match else ''
            if event_subject == subject and event.get('colorId') == class_color_id:
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
                return await save_file_to_event_logic(update, context, event, user_id)

        await query.edit_message_text(f"–ù–µ –Ω–∞—à–µ–ª –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π —Ç–∏–ø–∞ ¬´{class_type}¬ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'.")
        return CHOOSE_DATE_FOR_FILE
    except Exception as e:
        logger.error(f"Error finding next class for file: {e}", exc_info=True)
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        context.user_data.clear()
        return ConversationHandler.END


async def get_manual_date_for_file(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
    user_id = update.effective_user.id # <-- –î–û–ë–ê–í–õ–ï–ù–û

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    service = get_calendar_service(user_id)
    if not service:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return ConversationHandler.END

    try:
        day, month = map(int, update.message.text.split('.'))
        target_date = datetime.date(datetime.date.today().year, month, day)
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú")
        return CHOOSE_DATE_FOR_FILE

    subject = context.user_data.get('homework_subject')
    class_type = context.user_data.get('hw_type', '–°–µ–º–∏–Ω–∞—Ä')
    class_color_id = config.COLOR_MAP.get(class_type)
    time_min = datetime.datetime.combine(target_date, datetime.time.min).isoformat() + 'Z'
    time_max = datetime.datetime.combine(target_date, datetime.time.max).isoformat() + 'Z'

    try:
        events = service.events().list(calendarId='primary', timeMin=time_min, timeMax=time_max,
                                       singleEvents=True).execute().get('items', [])
        found_event = None
        for event in events:
            event_summary = event.get('summary', '')
            match = re.search(r'^(.*?)\s\(', event_summary)
            event_subject = match.group(1).strip() if match else ''
            if event_subject == subject and event.get('colorId') == class_color_id:
                found_event = event
                break

        if not found_event:
            await update.message.reply_text(
                f"–ù–∞ {target_date.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π —Ç–∏–ø–∞ ¬´{class_type}¬ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'.")
            return CHOOSE_DATE_FOR_FILE

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ---
        return await save_file_to_event_logic(update, context, found_event, user_id)

    except Exception as e:
        logger.error(f"Error with manual date for file: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END


# --- –õ–û–ì–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–û–ù–°–ü–ï–ö–¢–ê (STUDENT) ---

async def summary_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç."""
    query = update.callback_query
    await query.answer()

    # –ë–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    subjects = sorted(list(set(l['subject'] for d in config.SCHEDULE_DATA.values() for w in d.values() for l in w)))
    context.user_data['subjects_list'] = subjects

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    buttons = [[InlineKeyboardButton(name, callback_data=f"summary_subj_{i}")] for i, name in enumerate(subjects)]

    buttons.append([InlineKeyboardButton("‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

    await query.edit_message_text(
        "ü§ñ –ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –≥–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Å–ø–µ–∫—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    return CHOOSE_SUMMARY_SUBJECT

def find_next_homework_event(user_id: int, subject: str) -> dict | None:
    """–ò—â–µ—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É."""
    service = get_calendar_service(user_id)
    if not service:
        return None

    now = datetime.datetime.now(datetime.UTC).isoformat()
    try:
        events_result = service.events().list(
            calendarId='primary', timeMin=now, maxResults=100,
            singleEvents=True, orderBy='startTime'
        ).execute()
        events = events_result.get('items', [])

        for event in events:
            summary = event.get('summary', '')
            # –ò—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø–æ —Ç–µ–≥—É !!!–î–ó!!!
            if subject in summary and config.HOMEWORK_TITLE_TAG in summary:
                return event
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –î–ó –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")
        return None

async def summary_choose_subject(update: Update, context: CallbackContext) -> int:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∏—â–µ—Ç –î–ó –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –∑–∞—Ç–µ–º –∏—â–µ—Ç —É—á–µ–±–Ω–∏–∫–∏ –≤ –ë–î
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –≤—ã–±–æ—Ä.
    """
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    subject_index = int(query.data.split('_')[-1])
    subject = context.user_data['subjects_list'][subject_index]
    context.user_data['selected_subject'] = subject

    await query.edit_message_text(f"–ò—â—É –±–ª–∏–∂–∞–π—à–µ–µ –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'...")

    # --- 1. –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –î–ó –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ ---
    homework_event = await asyncio.to_thread(find_next_homework_event, user_id, subject)

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–ï–ö–°–¢ –î–ó ---
    homework_text = ""
    if homework_event and homework_event.get('description'):
        description = homework_event.get('description', '')
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ–±—â–µ–µ, –∏ –ª–∏—á–Ω–æ–µ –î–ó
        group_hw = extract_homework_part(description, config.GROUP_HOMEWORK_DESC_TAG)
        personal_hw = extract_homework_part(description, config.PERSONAL_HOMEWORK_DESC_TAG)

        if group_hw:
            homework_text += f"–û–±—â–µ–µ –î–ó: {group_hw}\n"
        if personal_hw:
            homework_text += f"–õ–∏—á–Ω–æ–µ –î–ó: {personal_hw}\n"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –î–ó –¥–ª—è –±—É–¥—É—â–∏—Ö —à–∞–≥–æ–≤
    context.user_data['homework_text'] = homework_text.strip()
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

    # --- 2. –°—Ü–µ–Ω–∞—Ä–∏–π –ê: –£ –î–ó –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ---
    if homework_event and homework_event.get('attachments'):
        attachment = homework_event['attachments'][0]
        context.user_data['calendar_attachment'] = attachment

        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ", callback_data="use_calendar_file")],
            [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—á–µ–±–Ω–∏–∫", callback_data="pick_another_book")],
            [InlineKeyboardButton("‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        await query.edit_message_text(
            f"–ö —ç—Ç–æ–º—É –î–ó —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª: üìé `{attachment['title']}`\n\n–î–µ–ª–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –Ω–µ–º—É?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return CHOOSE_SUMMARY_FILE

    # --- 3. –°—Ü–µ–Ω–∞—Ä–∏–π –ë: –§–∞–π–ª–∞ –Ω–µ—Ç, –∏—â–µ–º —É—á–µ–±–Ω–∏–∫–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
    textbooks = get_textbooks_by_subject(subject)

    if not textbooks:
        await query.edit_message_text(f"–£—á–µ–±–Ω–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}' –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É.")
        context.user_data.clear()
        return ConversationHandler.END

    context.user_data['db_textbooks'] = textbooks
    buttons = [
        [InlineKeyboardButton(f"üìñ {book['file_name']}", callback_data=f"use_db_book_{i}")]
        for i, book in enumerate(textbooks)

    ]
    buttons.append([InlineKeyboardButton("‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    await query.edit_message_text(
        "–ö –î–ó –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–∏–∫ –∏–∑ –±–∞–∑—ã:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return CHOOSE_SUMMARY_FILE


async def summary_pick_another_book(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–±–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ñ–∞–π–ª–∞ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    query = update.callback_query
    await query.answer()

    subject = context.user_data.get('selected_subject')
    textbooks = get_textbooks_by_subject(subject)

    if not textbooks:
        await query.edit_message_text(f"–£—á–µ–±–Ω–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}' –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É.")
        context.user_data.clear()
        return ConversationHandler.END

    context.user_data['db_textbooks'] = textbooks
    buttons = [
        [InlineKeyboardButton(f"üìñ {book['file_name']}", callback_data=f"use_db_book_{i}")]
        for i, book in enumerate(textbooks)
    ]
    buttons.append([InlineKeyboardButton("‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–∏–∫ –∏–∑ –±–∞–∑—ã:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return CHOOSE_SUMMARY_FILE


async def summary_file_chosen(update: Update, context: CallbackContext) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ (–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ –∏–∑ –±–∞–∑—ã) –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    query = update.callback_query
    await query.answer()

    context.user_data['chosen_file_callback'] = query.data

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –§–û–†–ú–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –° –¢–ï–ö–°–¢–û–ú –î–ó ---
    homework_text = context.user_data.get('homework_text')

    message_text = "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45, 48-51)."

    if homework_text:
        # –ï—Å–ª–∏ –î–ó –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
            f"```\n{homework_text}\n```\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45, 48-51)."
        )

    await query.edit_message_text(
        text=message_text,
        parse_mode='Markdown'  # –î–æ–±–∞–≤–ª—è–µ–º parse_mode –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ```
    )
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

    return GET_PAGE_NUMBERS


async def summary_get_pages(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    page_input = update.message.text

    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        pages_to_process = []
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –ø–æ –∑–∞–ø—è—Ç—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "45, 48-51")
        parts = [part.strip() for part in page_input.split(',')]
        for part in parts:
            if '-' in part:
                # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "48-51")
                start, end = map(int, part.split('-'))
                if start > end:
                    raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π.")
                pages_to_process.extend(range(start, end + 1))
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ
                pages_to_process.append(int(part))

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        pages_to_process = sorted(list(set(pages_to_process)))

        if not pages_to_process:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

    except ValueError as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45, 48-51).\n–û—à–∏–±–∫–∞: {e}"
        )
        return GET_PAGE_NUMBERS  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—Ö —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    context.user_data['pages_to_process'] = pages_to_process
    context.user_data['pages_str'] = ", ".join(map(str, pages_to_process))

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å", callback_data="confirm_summary_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
    ]

    await update.message.reply_text(
        f"–ì–æ—Ç–æ–≤–ª—é –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: {context.user_data['pages_str']}.\n\n–ù–∞—á–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CONFIRM_SUMMARY_GENERATION


def download_file_from_drive(user_id: int, file_id: str) -> bytes | None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å Google Drive –ø–æ –µ–≥–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤."""
    try:
        drive_service = get_drive_service(user_id)
        if not drive_service:
            return None

        request = drive_service.files().get_media(fileId=file_id)
        file_bytes = request.execute()
        return file_bytes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id} —Å Google Drive: {e}")
        return None


def generate_summary_placeholder(pdf_bytes: bytes, pages: list, subject: str) -> str:
    """
    –ò–ú–ò–¢–ê–¶–ò–Ø —Ä–∞–±–æ—Ç—ã –ò–ò.
    –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–∑–æ–≤ GPT.
    """
    logger.info(f"–ù–∞—á–∞—Ç–∞ –∏–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}' –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü: {pages}")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –±—É—Ä–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    time.sleep(5)

    summary_text = (
        f"ü§ñ *–ö–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{subject}¬ª*\n\n"
        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {', '.join(map(str, pages))}.\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "
        "—Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –∫–ª—é—á–µ–≤—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç–µ–∑–∏—Å–∞–º–∏. "
        "–†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é GPT-4o –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ."
    )
    logger.info("–ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return summary_text


def split_message(text: str, chunk_size: int = 4000) -> list[str]:
    """–î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ chunk_size."""
    if len(text) <= chunk_size:
        return [text]

    chunks = []
    # –£–º–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞–±–∑–∞—Ü–∞–º, —Å—Ç—Ä–æ–∫–∞–º –∏ —Å–ª–æ–≤–∞–º, —á—Ç–æ–±—ã –Ω–µ —Ä–≤–∞—Ç—å —Å–ª–æ–≤–∞
    while len(text) > chunk_size:
        split_pos = text.rfind('\n\n', 0, chunk_size)
        if split_pos == -1:
            split_pos = text.rfind('\n', 0, chunk_size)
        if split_pos == -1:
            split_pos = text.rfind(' ', 0, chunk_size)
        if split_pos == -1:
            split_pos = chunk_size

        chunks.append(text[:split_pos])
        text = text[split_pos:].lstrip()

    chunks.append(text)
    return chunks

async def summary_generate(update: Update, context: CallbackContext) -> int:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É. ‚è≥")

    user_id = update.effective_user.id
    user_data = context.user_data
    file_id_to_download = None

    # --- 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–∞–π–ª –±—ã–ª –≤—ã–±—Ä–∞–Ω ---
    callback_data = user_data.get('chosen_file_callback')

    if callback_data == 'use_calendar_file':
        attachment = user_data.get('calendar_attachment')
        file_id_to_download = attachment.get('fileId')

    elif callback_data and callback_data.startswith('use_db_book_'):
        book_index = int(callback_data.split('_')[-1])
        textbook = user_data['db_textbooks'][book_index]
        file_id_to_download = textbook.get('file_id')

    if not file_id_to_download:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    # --- 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Google Drive ---
    pdf_bytes = await asyncio.to_thread(download_file_from_drive, user_id, file_id_to_download)

    if not pdf_bytes:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å Google Drive.")
        return ConversationHandler.END

    # --- 3. –í—ã–∑—ã–≤–∞–µ–º '–ò–ò' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ (–ø–æ–∫–∞ –∏–º–∏—Ç–∞—Ü–∏—è) ---
    pages = user_data.get('pages_to_process')
    subject = user_data.get('selected_subject')
    homework_text = user_data.get('homework_text', '')
    # –î–æ—Å—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–∞–Ω–µ–µ
    pages_str = user_data.get('pages_str', '')

    summary = await asyncio.to_thread(
        generate_summary_from_pdf, pdf_bytes, pages, subject, homework_text, user_id, pages_str
    )

    # --- 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---
    summary_chunks = split_message(summary)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–ª, —á—Ç–æ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
    await query.edit_message_text("‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for i, chunk in enumerate(summary_chunks):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup = None
        if i == len(summary_chunks) - 1:
            keyboard = [[InlineKeyboardButton("‚è™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
            await context.bot.send_message(
                chat_id=user_id, text=chunk, reply_markup=reply_markup, parse_mode='Markdown'
            )
        except telegram.error.BadRequest as e:
            if 'Can\'t parse entities' in str(e):
                # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2: –ï—Å–ª–∏ Markdown —Å–ª–æ–º–∞–Ω, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                logger.warning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown. –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.")
                await context.bot.send_message(
                    chat_id=user_id, text=chunk, reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è (–Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π), —Å–æ–æ–±—â–∞–µ–º –æ –Ω–µ–π
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {e}")
                await context.bot.send_message(chat_id=user_id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.")

    user_data.clear()
    return ConversationHandler.END


def generate_summary_from_pdf(pdf_bytes: bytes, pages: list, subject: str, homework_text: str, user_id: int, pages_str: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ PDF, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ GPT-4o
    –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.
    """
    try:
        # --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI ---
        client = OpenAI(api_key=config.OPENAI_API_KEY)

        # --- 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ PDF ---
        pdf_document = fitz.open(stream=pdf_bytes, filetype="pdf")
        base64_images = []

        for page_num in pages:
            # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1-–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ, –≤ PyMuPDF 0-–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ
            page = pdf_document.load_page(page_num - 1)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            pix = page.get_pixmap(dpi=150)  # DPI –º–æ–∂–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞/—Å–∫–æ—Ä–æ—Å—Ç–∏
            img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
            buffer = io.BytesIO()
            img.save(buffer, format="JPEG", quality=75)  # –°–∂–∏–º–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
            base64_image = base64.b64encode(buffer.getvalue()).decode('utf-8')
            base64_images.append(base64_image)

        if not base64_images:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Ñ–∞–π–ª–∞."

        # --- 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT-4o ---
        hw_prompt_part = ""
        if homework_text:
            hw_prompt_part = (
                f"–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏ –∞—Å–ø–µ–∫—Ç–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º:\n"
                f"'''\n{homework_text}\n'''\n\n"
            )
        prompt_text = (
            f"–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–Ω—è—Ç—å –Ω–∞ –∫–∞–∫—É—é —Ç–µ–º—É –∑–∞–¥–∞–Ω–∏—è –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π"
            f"—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç –∏–∑ —Ç–µ–æ—Ä–∏–∏ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª. –≠—Ç–æ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ—á—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            f"–¢–µ–º–∞: {subject}. \n\n"
            f"–ó–∞–¥–∞—á–∏:\n"
            f"1. –ù–µ —Ä–µ—à–∞–π –∑–∞–¥–∞–Ω–∏—è, –∞ –ø–æ–º–æ–≥–∏ –ø–æ–Ω—è—Ç—å —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å\n"
            f"2. –°–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Ç–µ–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞–Ω–∏–π.\n"
            "–ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞:\n"
            "1. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –ø–æ-—Ä—É—Å—Å–∫–∏.\n"
            "2. –í–ê–ñ–ù–û: –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –æ–Ω –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.\n"
            "3. –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –ø–æ—Å–ª–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞. –û—Ç —Ç–µ–±—è –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–ø–µ–∫—Ç.\n"
            "4. **–ò—Å–ø–æ–ª—å–∑—É–π Telegram Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n"
            "   - **–ó–∞–≥–æ–ª–æ–≤–∫–∏** —Ä–∞–∑–¥–µ–ª–æ–≤ –≤—ã–¥–µ–ª—è–π –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è*).\n"
            "   - *–ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã* –∏–ª–∏ –≤–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏ –≤—ã–¥–µ–ª—è–π –∫—É—Ä—Å–∏–≤–æ–º.\n"
            "   - ```–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ä–º—É–ª—ã``` –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª—è—Ç—å –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º (–æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏).\n"
            "5. –ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.\n"
            "6. –ò–∑–ª–∞–≥–∞–π —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é —Å—É—Ç—å, –±–µ–∑ –≤–æ–¥—ã –∏ –ª–∏—à–Ω–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.\n"
            "7. –í –∫–æ–Ω—Ü–µ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ–¥–Ω—É —Å–∞–º—É—é —Å–ª–æ–∂–Ω—É—é –∏–ª–∏ –≤–∞–∂–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è. –°–æ–∑–¥–∞–π –¥–ª—è –Ω–µ–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤–±–∏—Ç—å –≤ GPT. –°–≤–µ—Ä—Ö—É —É–∫–∞–∂–∏ '**–ì–æ—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ GPT:**'. –í –∫–æ–Ω—Ü–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≤–Ω–∞—á–∞–ª–µ –ø–∏—à–∏ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏(```). –ù–∞–ø—Ä–∏–º–µ—Ä:(``` –û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–æ Passive voice ```).\n\n"
            
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–æ—Å—Ç–∞–≤—å –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º."
        )

        messages = [
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
                    *[
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img}"}}
                        for img in base64_images
                    ]
                ]
            }
        ]

        response = client.chat.completions.create(
            model="gpt-5-mini",
            messages=messages,
            max_completion_tokens=6000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        )

        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¢–û–ö–ï–ù–û–í ---
        if response.choices and response.choices[0].message.content:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
            summary = response.choices[0].message.content.strip()

            #
            # ===> –í–û–¢ –ú–ï–°–¢–û –î–õ–Ø –ö–û–î–ê, –û –ö–û–¢–û–†–û–ú –¢–´ –°–ü–†–ê–®–ò–í–ê–õ <===
            #
            # –ó–∞—Ç–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
            if response.usage:
                logger.info(
                    f"–¢–æ–∫–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: "
                    f"–í—Ö–æ–¥–Ω—ã–µ (–ø—Ä–æ–º–ø—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è): {response.usage.prompt_tokens}, "
                    f"–í—ã—Ö–æ–¥–Ω—ã–µ (–æ—Ç–≤–µ—Ç): {response.usage.completion_tokens}, "
                    f"–í—Å–µ–≥–æ: {response.usage.total_tokens}"
                )
                log_g_sheets(
                    user_id=user_id,
                    prompt_tokens=response.usage.prompt_tokens,
                    completion_tokens=response.usage.completion_tokens,
                    total_tokens=response.usage.total_tokens,
                    summary_text=summary,
                    subject=subject,
                    homework_text=homework_text,
                    pages_str=pages_str
                )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∏ –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç
            return summary
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            logger.warning(
                f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞. Finish reason: {response.choices[0].finish_reason if response.choices else 'N/A'}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç –æ—Ç AI. –û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –±—ã–ª –ø—É—Å—Ç—ã–º."

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {e}")
        error_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI:\n\n```\n{e}\n```"
        return error_text




#–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø–∏—Å–∏ –¥–∑




async def send_homework_reminder(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –î–ó –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º."""
    job_context = context.job.data
    subject = job_context['subject']

    keyboard = [
        # –ú—ã –¥–æ–±–∞–≤–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–π–º–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É
        [InlineKeyboardButton("‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –î–ó", callback_data=f"reminder_add_hw_{subject}")],
        [InlineKeyboardButton("‚ùå –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å", callback_data="reminder_ignore")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å–µ–º–∏–Ω–∞—Ä.\n–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{subject}¬ª."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
    for admin_id in config.ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id, text=message_text, reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def check_seminars_and_schedule_reminders(context: CallbackContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤
    –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
    """
    bot_data = context.bot_data
    if 'scheduled_reminders' not in bot_data:
        bot_data['scheduled_reminders'] = set()

    # –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–π–ª–∞–º —Ç–æ–∫–µ–Ω–æ–≤
    try:
        user_ids = [
            int(f.split('_')[1].split('.')[0])
            for f in os.listdir(auth_web.TOKEN_DIR) if f.startswith('token_')
        ]
    except (FileNotFoundError, IndexError):
        user_ids = []

    now = datetime.datetime.now(datetime.timezone.utc)
    # –ò—â–µ–º —Å–µ–º–∏–Ω–∞—Ä—ã –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç
    time_max = now + datetime.timedelta(minutes=30)

    unique_seminars = set()

    for user_id in user_ids:
        service = get_calendar_service(user_id)
        if not service:
            continue

        try:
            events = service.events().list(
                calendarId='primary', timeMin=now.isoformat(), timeMax=time_max.isoformat(),
                singleEvents=True, orderBy='startTime'
            ).execute().get('items', [])

            for event in events:
                # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–º–∏–Ω–∞—Ä—ã
                if event.get('colorId') == config.COLOR_MAP.get("–°–µ–º–∏–Ω–∞—Ä"):
                    end_time_str = event['end'].get('dateTime')
                    event_id = event['id']

                    if not end_time_str:
                        continue

                    end_time = datetime.datetime.fromisoformat(end_time_str)
                    # –ö–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: ID —Å–æ–±—ã—Ç–∏—è + –¥–∞—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–∏—è)
                    seminar_key = f"{event_id}_{end_time.date()}"
                    unique_seminars.add((seminar_key, end_time, event.get('summary')))

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è user_id {user_id}: {e}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤
    for key, end_time, summary in unique_seminars:
        reminder_time = end_time - datetime.timedelta(minutes=5)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–Ω–µ–µ
        if reminder_time > now and key not in bot_data['scheduled_reminders']:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            match = re.search(r'^(.*?)\s\(', summary)
            subject = match.group(1).strip() if match else summary.strip()

            context.job_queue.run_once(
                send_homework_reminder,
                reminder_time,
                data={'subject': subject},
                name=key
            )
            bot_data['scheduled_reminders'].add(key)
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}' –Ω–∞ {reminder_time.strftime('%H:%M:%S')}")


async def reminder_ignore(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å', —É–¥–∞–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    query = update.callback_query
    await query.answer()
    await query.delete_message()


async def reminder_add_hw_start(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –î–ó –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞—è —à–∞–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.
    """
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ 'reminder_add_hw_–ú–∞—Ç–∞–Ω–∞–ª–∏–∑')
    subject = query.data.replace("reminder_add_hw_", "")

    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    context.user_data['group_homework_subject'] = subject
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø '–°–µ–º–∏–Ω–∞—Ä', —Ç.–∫. –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∏—Ö
    context.user_data['hw_type'] = "–°–µ–º–∏–Ω–∞—Ä"

    keyboard = [[InlineKeyboardButton("–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–º–∏–Ω–∞—Ä", callback_data="find_next_class_group_text")]]
    await query.edit_message_text(
        text=f"‚úçÔ∏è **–ó–∞–ø–∏—Å—å –î–ó –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{subject}¬ª**\n\n"
             "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —à–∞–≥—É –¥–∏–∞–ª–æ–≥–∞ - –æ–∂–∏–¥–∞–Ω–∏—é –¥–∞—Ç—ã
    return CHOOSE_GROUP_HW_DATE_OPTION

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ ---

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –°—Ç–∞–ª–æ:
    # persistence = PicklePersistence(filepath="bot_persistence") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        logging.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return
    application = Application.builder().token(bot_token).build()

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –ó–ê–ü–£–°–ö–ê–ï–ú –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ---
    job_queue = application.job_queue
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (900 —Å–µ–∫—É–Ω–¥)
    job_queue.run_repeating(check_seminars_and_schedule_reminders, interval=900, first=10)
    # ---------------------------------------------

    auth_web.run_oauth_server()

    # --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢—á–∏–∫–û–í –î–ò–ê–õ–û–ì–û–í ---

    main_menu_fallback = CallbackQueryHandler(back_to_main_menu, pattern='^main_menu$')

    registration_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(logout_handler, pattern='^logout$'),
            CallbackQueryHandler(register_start, pattern='^register$')
        ],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email_and_register)],
        },
        fallbacks=[CommandHandler('start', start_over_fallback), main_menu_fallback],
        name="registration_conversation",

    )

    schedule_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(schedule_menu, pattern='^schedule_menu$')],
        states={
            SCHEDULE_MENU: [
                CallbackQueryHandler(schedule_menu, pattern='^schedule_menu$'),
                CallbackQueryHandler(create_schedule_handler, pattern='^create_schedule$'),
                CallbackQueryHandler(delete_schedule_confirm, pattern='^delete_schedule$'),
            ],
            CONFIRM_DELETE_SCHEDULE: [
                CallbackQueryHandler(run_schedule_deletion, pattern='^confirm_delete$'),
                CallbackQueryHandler(schedule_menu, pattern='^schedule_menu$'),
            ],
        },
        fallbacks=[CommandHandler('start', start_over_fallback), main_menu_fallback],
        name="schedule_conversation",

    )

    # --- –ï–î–ò–ù–´–ô –ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–°–ï–• –î–ó ---
    homework_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(homework_management_menu_dispatcher, pattern='^homework_management_menu$'),
            CallbackQueryHandler(reminder_add_hw_start, pattern=r'^reminder_add_hw_')
        ],
        states={
            # –£—Ä–æ–≤–µ–Ω—å 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –î–ó
            HOMEWORK_MENU: [
                CallbackQueryHandler(personal_homework_menu, pattern='^personal_hw_menu$'),
                CallbackQueryHandler(group_homework_menu, pattern='^group_hw_menu$'),
            ],


            PERSONAL_HW_MENU: [
                CallbackQueryHandler(homework_menu, pattern='^homework_add_start$'),
                CallbackQueryHandler(edit_hw_start, pattern='^homework_edit_start$'),
                CallbackQueryHandler(add_file_start, pattern='^add_file_start$'),
                CallbackQueryHandler(homework_management_menu_dispatcher, pattern='^homework_management_menu$'),
            ],
            GET_HW_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_hw_text)],
            CHOOSE_HW_SUBJECT: [CallbackQueryHandler(choose_hw_subject, pattern=r'^hw_subj_')],
            CHOOSE_HW_DATE_OPTION: [
                CallbackQueryHandler(find_next_class, pattern='^find_next_class$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_manual_date_for_hw)
            ],
            GET_FILE_ONLY: [MessageHandler(filters.Document.ALL | filters.PHOTO, get_file_only)],
            CHOOSE_SUBJECT_FOR_FILE: [CallbackQueryHandler(choose_subject_for_file, pattern=r'^file_subj_')],
            CHOOSE_DATE_FOR_FILE: [
                CallbackQueryHandler(find_next_class_for_file, pattern='^find_next_class_for_file$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_manual_date_for_file),
            ],
            EDIT_HW_CHOOSE_SUBJECT: [CallbackQueryHandler(edit_hw_choose_subject, pattern=r'^edit_hw_subj_')],
            EDIT_HW_GET_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_hw_get_date)],
            EDIT_HW_MENU: [
                CallbackQueryHandler(edit_delete_text, pattern='^edit_delete_text$'),
                CallbackQueryHandler(edit_delete_file, pattern='^edit_delete_file$'),
                CallbackQueryHandler(edit_replace_text_start, pattern='^edit_replace_text$'),
            ],
            EDIT_HW_REPLACE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_hw_get_new_text)],

            # --- –ù–û–í–´–ï –í–ï–¢–ö–ò –ì–†–£–ü–ü–û–í–û–ì–û –î–ó ---
            GROUP_HW_MENU: [
                CallbackQueryHandler(group_hw_add_text_start, pattern='^group_hw_add_text_start$'),
                CallbackQueryHandler(group_hw_add_file_start, pattern='^group_hw_add_file_start$'),
                CallbackQueryHandler(group_hw_edit_start, pattern='^group_hw_edit_start$'),
                CallbackQueryHandler(homework_management_menu_dispatcher, pattern='^homework_management_menu$'),
            ],
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            GET_GROUP_HW_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_group_hw_text)],
            CHOOSE_GROUP_HW_SUBJECT: [CallbackQueryHandler(choose_group_hw_subject, pattern=r'^group_hw_subj_')],
            CHOOSE_GROUP_HW_DATE_OPTION: [
                CallbackQueryHandler(find_next_class_for_group_hw_text, pattern='^find_next_class_group_text$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_manual_date_for_group_hw_text),
            ],
            CHOOSE_SUBJECT_FOR_GROUP_FILE: [
                CallbackQueryHandler(choose_subject_for_group_file, pattern=r'^group_file_subj_')
            ],
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            GET_GROUP_FILE_ONLY: [MessageHandler(filters.Document.ALL | filters.PHOTO, get_file_only)],
            CHOOSE_DATE_FOR_GROUP_FILE: [

                CallbackQueryHandler(find_next_class_for_group_hw_file, pattern='^find_next_class_for_group_file$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_manual_date_for_group_hw_file),
            ],
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            EDIT_GROUP_HW_CHOOSE_SUBJECT: [CallbackQueryHandler(edit_group_hw_choose_subject, pattern=r'^edit_group_hw_subj_')],
            EDIT_GROUP_HW_GET_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_group_hw_get_date)],
            EDIT_GROUP_HW_MENU: [
                CallbackQueryHandler(edit_group_delete_text, pattern='^edit_group_delete_text$'),
                CallbackQueryHandler(edit_group_delete_file, pattern='^edit_group_delete_file$'),
                CallbackQueryHandler(edit_group_replace_text_start, pattern='^edit_group_replace_text$'),
            ],
            EDIT_GROUP_HW_REPLACE_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_group_get_new_text)],
        },
        fallbacks=[CommandHandler('start', start_over_fallback), main_menu_fallback],
        name="homework_conversation",
    )
    textbook_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(add_textbook_start, pattern='^add_textbook_start$')
        ],
        states={
            ADD_TEXTBOOK_CHOOSE_SUBJECT: [
                CallbackQueryHandler(add_textbook_choose_subject, pattern=r'^textbook_subj_')
            ],
            GET_TEXTBOOK_FILE: [
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ç–∏–ø–æ–º PDF
                MessageHandler(filters.Document.PDF, add_textbook_get_file)
            ],
        },
        fallbacks=[CommandHandler('start', start_over_fallback), main_menu_fallback],
        name="textbook_conversation",
    )
    summary_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(summary_start, pattern='^summary_start$')
        ],
        states={
            CHOOSE_SUMMARY_SUBJECT: [
                CallbackQueryHandler(summary_choose_subject, pattern=r'^summary_subj_')
            ],
            # –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ò –ï–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
            CHOOSE_SUMMARY_FILE: [
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
                CallbackQueryHandler(summary_file_chosen, pattern='^use_calendar_file$'),
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π"
                CallbackQueryHandler(summary_pick_another_book, pattern='^pick_another_book$'),
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —É—á–µ–±–Ω–∏–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, use_db_book_0)
                CallbackQueryHandler(summary_file_chosen, pattern=r'^use_db_book_')
            ],
            GET_PAGE_NUMBERS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, summary_get_pages)
            ],
            CONFIRM_SUMMARY_GENERATION: [
                CallbackQueryHandler(summary_generate, pattern='^confirm_summary_yes$')
            ]
        },
        fallbacks=[CommandHandler('start', start_over_fallback), main_menu_fallback],
        name="summary_conversation",
    )

    # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –í –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ---

    # –ì—Ä—É–ø–ø–∞ 0: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å)
    application.add_handler(registration_handler)
    application.add_handler(schedule_handler)
    application.add_handler(homework_handler)

    # –ì—Ä—É–ø–ø–∞ 1: –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤–æ –≤—Ç–æ—Ä—É—é –æ—á–µ—Ä–µ–¥—å)
    application.add_handler(CommandHandler('start', start), group=1)
    application.add_handler(CallbackQueryHandler(quick_login, pattern='^login$'), group=1)
    application.add_handler(CallbackQueryHandler(start_work_handler, pattern='^start_work_after_auth$'), group=1)
    application.add_handler(
        CallbackQueryHandler(homework_management_menu_dispatcher, pattern='^homework_management_menu$'), group=1)
    application.add_handler(CallbackQueryHandler(back_to_main_menu, pattern='^main_menu$'), group=1)
    application.add_handler(textbook_handler)
    application.add_error_handler(error_handler)
    application.add_handler(summary_handler)
    application.add_handler(CallbackQueryHandler(reminder_ignore, pattern='^reminder_ignore$'), group=1)

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
    internal_app = web.Application()
    internal_app['bot_app'] = application
    internal_app.router.add_post('/auth_success', http_auth_callback)
    runner = web.AppRunner(internal_app)
    await runner.setup()
    site = web.TCPSite(runner, '127.0.0.1', 8081)

    # --- –ó–∞–ø—É—Å–∫ ---
    try:
        await application.initialize()
        await site.start()
        logging.info("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–ª–ª–±—ç–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8081")
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        await application.start()
        await application.updater.start_polling()
        while True:
            await asyncio.sleep(3600)
    finally:
        await application.updater.stop()
        await application.stop()
        await runner.cleanup()
        logging.info("–ë–æ—Ç –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


if __name__ == '__main__':
    asyncio.run(main())